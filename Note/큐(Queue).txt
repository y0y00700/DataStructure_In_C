Queue 의 이해와 ADT 정의

큐는 FIFO(First-in , First-out) 구조의 자료구조이다.
때문에 먼저 들어간 것이 먼저 나오는, 일종의 줄서기에 비유할 수 있는 자료구조이다.

큐에 데이터를 넣는 연산  - enqueue
큐에서 데이터를 꺼내는 연산  - dequeue

큐는 운영체제 관점에서 보면 프로세스나 쓰레드의 관리에 활용이 되는 자료구조이다.
이렇듯 운영체제의 구현에도 자료구조가 사용이 된다.
따라서, 운영체제의 이해를 위해서는 자료구조에 대한 이해가 선행되어야 한다.

큐의 ADT 정의
 : ADT를 대상으로 배열 기반의 큐, 연결 리스트 기반의 큐를 구현 할 수 있다.
void QueueInit(Queue * pq);
 - 큐의 초기화를 진행한다.
 - 큐 생성 후 제일 먼저 호출되는 함수이다.

int QIsEmpty(Queue *pq);
 - 큐가 빈 경우 TRUE 그렇지 않은 경우 FALSE 를 반환한다. 

void Enqueue(Queue * pq, Data data);
 - 큐에 데이터를 저장한다. 매개변수 data로 전달된 값을 저장한다.

Data Dequeue(Queue *pq);
 - 저장순서가 앞선 데이터를 삭제한다.
 - 삭제된 데이터는 반환된다.
 - 본 함수의 호출을 위해서는 데이터가 하나 이상 존재함이 보장되어야 한다.

Data QPeek(Queue *pq);
 - 저장순서가 가장 앞선 데이터를 반한하되 삭제하지 않는다.
 - 본 함수의 호출을 위해서는 데이터가 하나 이상 존재함이 보장되어야 한다.


큐의 배열 기반 구현
큐의 구현 논리 

큐는 Front(앞)  와 Rear(뒤)  멤버를 가져야 한다 
배열 기반으로 구현할때는, Front 가 이동하고 Rear 에 들어오면
배열의 Index 가 이동해야만한다.(불필요한 이동) 
그렇기 때문에, 최초 입력된 데이터는 Front 에 있고
Rear 가 index를 +1 씩 증가하면서, 신규 데이터를 삽입한다.
요약하자면, 
Front - 출구 (dequeue:삭제) // Rear - 입구(enqueue:삽입) 가 된다. 

만약 삭제와 삽입이 계속 진행되면, 앞쪽 배열은 빈공간이 되고, 
뒷공간만 활용하는 누수가 발생한다.

이를 보완하기 위해 배열의 Max 길이 까지 Front/Rear가 도착하면, 
다시 0번 Index로 갈수 있도록 변형한것이 원형 큐이다.
(Pointer 의 이동)

보편적으로 배열로 구현할때에는, 원형큐를 베이스 모델로 삼는다.

원형큐의 문제는 
Rear가 한바퀴 돈경우, Front 에서 삭제가 진행되지 않은 경우,
다시 Front 원점으로 돌아오면서 데이터를 overwrite 하는 문제점이 발생할 수 있다.

따라서 구현에 앞서 F와 R의 관계를 명확히 정의한 후, 구현을 해야 한다.

F == R 이 같은 위치에 있으면, 데이터수가 1개라는 뜻. or Overwrite 문제발생 원인!

문제점 해결
큐의 하나를 항상 비워둔다.(이 부분은 데이터를 채우지 않는다.)
그리고 R은 F를 앞서지 못하게끔 막는다.

배열 기반 큐(Queue) 구조체 
typedef struct _Queue{
	int front;
	int rear;
	Data queArr[QUE_LEN];

} CQueue;