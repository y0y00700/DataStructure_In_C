Chapter 14 그래프 (Graph)

그래프의 역사와 이야기거리
모든 다리를 한 번씩만 건너서 처음 출발했던 장소로 돌아올 수 있는가?

쾨니히스베르크의 다리 문제

정점 별로 연결된 간선의 수가 모두 짝수 이어야 간선을 한 번씩만 지나서
처음 출발했던 정점으로 돌아올 수 있다.

정점과 간선
동그라미 - 정점
선 - 간선

정점과 간선의 모임 - Graph 

그래프의 이해와 종류

무방향 완전 그래프 : 방향성이 없다. 
방향 완전 그래프 : 방향성이 있다.

가중치 그래프와 부분 그래프
무방향 가중치 그래프 , 방향 가중치 그래프

부분 그래프
일부 정점과 간선으로 구성이 된 그래프

그래프의 집합 표현
그래프 G의 정점 집함 V(G)로 표시
그래프 G의 간선 집합 E(G)로 표시
ex) 
무방향은 () 소괄호 방향은 <> 꺽쇠 괄호 표현함.
(무방향 그래프)
V(G1) = {A,B,C,D}
E(G1) = {(A,B),(A,C),(A,D),(B,C),(C,D)}
(방향 그래프)
V(G1) = {A,B,C,D}
E(G1) = {<A,B>,<A,C>,<A,D>,<B,C>,<C,D>}

그래프의 ADT
void GraphInit(UALGraph * pg, int nv);
 - 그래프의 초기화
 - 두 번째 인자로 정점의 수를 전달.
void GraphDestory(UALGraph * pg);
 - 그래프 초기화 과정에서 할당한 리소스를 반환
void AddEdge(UALGraph * pg, int fromV,int toV);
 - 매개변수 fromV와 toV로 전달된 정점을 연결하는 간선을 그래프에 추가한다.
void ShowGraphEdgeInfo(UALGraph * pg);
 - 그래프의 간선 정보를 출력한다.

모든 기능과 가능성을 담아서 ADT를 정의하는 것이 능사는 아니다.
특정 그래프를 대상으로 ADT를 제한하여 정의하는 것이 오히려 현명할 수 있다.

정점의 이름을 선언하는 방법
ex) 
enum{A,B,C,D,E,F,G,H,I,J};
enum{SEOUL,INCHEON,DAEGU,BUSAN,KWANGJU};


그래프를 구현하는 두 가지 방법 : 
1.인접 행렬 기반
정방 행렬을 이용하는 인접 행렬 기반 그래프
2차원 배열 기반 으로 간선정보를  True(1), False(0) 로 marking
각 배열의 index 는 정점

무방향인 경우 배열 2개에 Marking
방향인 경우 배열 1개에 Marking

2.인접 리스트 기반
A - B - C - D
B - A
C - A
D - A

인접 리스트 기반 그래프의 구현
그래프의 헤더파일
#include "DLinkedList.h"

typedef struct _ual{
	int numV; // 정점의 수
	int numE; // 간선의 수
	List * adjList; // 간선의 정보
} ALGraph;

int main(void){
	ALGraph graph;
	GraphInit (&graph, 5);
	
	AddEdge(&graph, A,B);
	AddEdge(&graph, A,D);
	AddEdge(&graph, B,C);
	AddEdge(&graph, C,D);
	AddEdge(&graph, D,E);
	AddEdge(&graph, E,A);

	ShowGraphEdgeInf(&graph);
	GraphDestroy(&graph);
	return 0;
}

그래프의 표현이 목적

output 
A와 연결된 정점 : B , C , D ...
B와 연결된 정점  ..
C와 연결된 정점 .. 
D와 연결된 정점.. 
E와 연결된 정점..

void GraphInit(ALGraph * pg, int nv){
	int i;
	pg->adjList = (List*)malloc(sizeof(List)*nv);

	pg->numV = nv;
	pg->numE = 0;

	for(i=0; i<nv;i++){
		ListInit(&(pg->adjList[i]));
		SetSortRule(&(pg->adjList[i]), WhoIsPrecede);
	}
}

void GraphDestroy(ALGraph * pg){
	if(pg->adjList != NULL)
		free(pg->adjList);
}

// 간선의 추가
void AddEdge(ALGraph * pg, int fromV, int toV){
	LInsert(&(pg->adjList[fromV],toV);
	LInsert(&(pg->adjList[toV],fromV);
	pg->numE +=1;
}

// 간선의 정보 출력
void ShowGraphEdgeInfo(ALGraph * pg){
	int i;
	int vx;

	for(i=0;i<pg->numV;i++){
		printf("%c와 연결된 정점: ", i+65);

		if(LFirst(&(pg->adjList[i], &vx)){
			printf("%c ", vx+65);
			while(LNext(&(pg->adjList[i]), &vx))
				printf("%c", vx+65);
		}
		printf("\n");
	}
}


그래프의 탐색

그래프 탐색의 종류(알고리즘)
1. 깊이 우선 탐색 (Depth First Search)
2. 너비 우선 탐색 (Breadth First Search)

※ 2개 탐색 방법 모두 그래프의 모든 정점을 방문하는 방법임

1. 깊이 우선 탐색 : Depth First Search -> 탐색의 깊이를 우선시 한다.
한 정점에만 연락을 취해나가며 탐색한다.
연락을 할 곳이 없으면 자신에게 연락한 정점에 이를 알린다.
마지막에 시작지점으로 되돌아오면 연락이 끝난다.

2. 너비 우선 탐색 :  Breadth First Search -> 내 주변의 정점의 수를 우선시 한다. (연결 된 모든 이에게 연락)



깊이 우선 탐색의 구현 모델 : 과정 
스택이 필요
연락을 넘긴 시점에 스택에 올린다.(push)
더이상 연락할 간선이 존재하지 않는 경우 스택에서 마지막 연락을 취한 정점을 스택에서 꺼낸다.(pop)

깊이 우선 탐색 구현(코드레벨)
ALGraph.h
ALGraph.c

ALGraphDFS.h
ALGraphDFS.c

void DFShowGraphVertex(ALGraph * pg, int startV);
 - 그래프의 모든 정점 정보를 출력하는 함수
 - DFS 기반으로 정의가 된 함수

깊이 우선 탐색의 Helper Func

// 방문한 정점의 정보를 기록 및 출력
int VisitVertex(ALGraph * pg, int visitV){
	if(pg->visitInfo[visitV] == 0){
		pg->visitInfo[visitV] = 1;
		printf("%c ", visitV + 65);
		return TRUE;
	}
	return FALSE;
}

DFShowGraphVertex 함수의 구현에 필요한 DFShowGraphVertex 함수 내에서
호출이 되는 함수로써 정점의 정보를 그래프 멤버 visitInfo가 가리키는 배열에 등록하는 기능을 제공한다.

실제 구현
void DFShowGraphVertex(ALGraph * pg, int startV){
	// Init Area
	Stack stack;
	int visitV = startV;
	int nextV;
	StackInit(&stack);
	VisitVertext(pg,visitV);
	SPush(&stack,visitV);

	while(LFirst(&(pg->adjList[visitV]), & nextV) == TRUE){
		int visitFlag = FALSE;
		if(VisitVertex(pg,nextV) == TRUE){
			// 방문을 시도했는데 성공시,
			SPush(&stack,visitV);
			visitV = nextV;
			visitFlag = TRUE;
		}else{
			// 방문 시도시 실패...
			while(LNext(&(pg->adjList[visitV]), &nextV) == TRUE){
				if(VisitVertex(pg,nextV) == TRUE){
					SPush(&stack,visitV);
					visitV = nextV;
					visitFlag = TRUE;
					break;
				}
			}
		}
	}
	if(visitFlag == FALSE){ // 연결된 정점과의 방문이 모두 완료시,
		if(SIsEmpty(&stack) == TRUE)
			break;
		else 
			visitV = SPop(&stack); // 되돌아 가기 위해 POP 연산
	}
	memset(pg->visitInfo,0,sizeof(int) * pg -> numV);
}
