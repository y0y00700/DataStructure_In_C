Chapter 14 그래프 (Graph)

그래프의 역사와 이야기거리
모든 다리를 한 번씩만 건너서 처음 출발했던 장소로 돌아올 수 있는가?

쾨니히스베르크의 다리 문제

정점 별로 연결된 간선의 수가 모두 짝수 이어야 간선을 한 번씩만 지나서
처음 출발했던 정점으로 돌아올 수 있다.

정점과 간선
동그라미 - 정점
선 - 간선

정점과 간선의 모임 - Graph 

그래프의 이해와 종류

무방향 완전 그래프 : 방향성이 없다. 
방향 완전 그래프 : 방향성이 있다.

가중치 그래프와 부분 그래프
무방향 가중치 그래프 , 방향 가중치 그래프

부분 그래프
일부 정점과 간선으로 구성이 된 그래프

그래프의 집합 표현
그래프 G의 정점 집함 V(G)로 표시
그래프 G의 간선 집합 E(G)로 표시
ex) 
무방향은 () 소괄호 방향은 <> 꺽쇠 괄호 표현함.
(무방향 그래프)
V(G1) = {A,B,C,D}
E(G1) = {(A,B),(A,C),(A,D),(B,C),(C,D)}
(방향 그래프)
V(G1) = {A,B,C,D}
E(G1) = {<A,B>,<A,C>,<A,D>,<B,C>,<C,D>}

그래프의 ADT
void GraphInit(UALGraph * pg, int nv);
 - 그래프의 초기화
 - 두 번째 인자로 정점의 수를 전달.
void GraphDestory(UALGraph * pg);
 - 그래프 초기화 과정에서 할당한 리소스를 반환
void AddEdge(UALGraph * pg, int fromV,int toV);
 - 매개변수 fromV와 toV로 전달된 정점을 연결하는 간선을 그래프에 추가한다.
void ShowGraphEdgeInfo(UALGraph * pg);
 - 그래프의 간선 정보를 출력한다.

모든 기능과 가능성을 담아서 ADT를 정의하는 것이 능사는 아니다.
특정 그래프를 대상으로 ADT를 제한하여 정의하는 것이 오히려 현명할 수 있다.

정점의 이름을 선언하는 방법
ex) 
enum{A,B,C,D,E,F,G,H,I,J};
enum{SEOUL,INCHEON,DAEGU,BUSAN,KWANGJU};


그래프를 구현하는 두 가지 방법 : 
1.인접 행렬 기반
정방 행렬을 이용하는 인접 행렬 기반 그래프
2차원 배열 기반 으로 간선정보를  True(1), False(0) 로 marking
각 배열의 index 는 정점

무방향인 경우 배열 2개에 Marking
방향인 경우 배열 1개에 Marking

2.인접 리스트 기반
A - B - C - D
B - A
C - A
D - A

인접 리스트 기반 그래프의 구현
그래프의 헤더파일
#include "DLinkedList.h"

typedef struct _ual{
	int numV; // 정점의 수
	int numE; // 간선의 수
	List * adjList; // 간선의 정보
} ALGraph;

int main(void){
	ALGraph graph;
	GraphInit (&graph, 5);
	
	AddEdge(&graph, A,B);
	AddEdge(&graph, A,D);
	AddEdge(&graph, B,C);
	AddEdge(&graph, C,D);
	AddEdge(&graph, D,E);
	AddEdge(&graph, E,A);

	ShowGraphEdgeInf(&graph);
	GraphDestroy(&graph);
	return 0;
}

그래프의 표현이 목적

output 
A와 연결된 정점 : B , C , D ...
B와 연결된 정점  ..
C와 연결된 정점 .. 
D와 연결된 정점.. 
E와 연결된 정점..

void GraphInit(ALGraph * pg, int nv){
	int i;
	pg->adjList = (List*)malloc(sizeof(List)*nv);

	pg->numV = nv;
	pg->numE = 0;

	for(i=0; i<nv;i++){
		ListInit(&(pg->adjList[i]));
		SetSortRule(&(pg->adjList[i]), WhoIsPrecede);
	}
}

void GraphDestroy(ALGraph * pg){
	if(pg->adjList != NULL)
		free(pg->adjList);
}

// 간선의 추가
void AddEdge(ALGraph * pg, int fromV, int toV){
	LInsert(&(pg->adjList[fromV],toV);
	LInsert(&(pg->adjList[toV],fromV);
	pg->numE +=1;
}

// 간선의 정보 출력
void ShowGraphEdgeInfo(ALGraph * pg){
	int i;
	int vx;

	for(i=0;i<pg->numV;i++){
		printf("%c와 연결된 정점: ", i+65);

		if(LFirst(&(pg->adjList[i], &vx)){
			printf("%c ", vx+65);
			while(LNext(&(pg->adjList[i]), &vx))
				printf("%c", vx+65);
		}
		printf("\n");
	}
}

