테이블 & 해쉬

테이블 자료구조 : 
데이터가 key와 value 한쌍을 이루며, key가 데이터의 저장 및 탐색의 도구가 된다.
즉 테이블 자료구조에서는 원하는 데이터를 단번에 찾을 수 있다.

AVL트리의 탐색 연산은 O(log2n) 의 시간 복잡도를 보이는 반면, 테이블 자료구조의
탐색 연산은 O91)의 시간 복잡도를 보인다.

테이블은 사전 구조 또는 맵(map)이라고도 불린다.


배열을 기반으로 하는 테이블
typedef struct _empInfo{
	int empNum;
	int age;
}

int main(void){
	EmpInfo empInfoArr[1000];
	EmpInfo ei;
	int eNum;

	printf("사번과 나이 입력: ");
	scanf("%d %d", &(ei.empNum), &(ei.age));
	empInfoArr[ei.empNum] = ei;

	printf("확인하고픈 직원의 사번 입력: ");
	scanf("%d",&eNum);

	ei = empInfoArr[eNum];
	printf("사번 %d, 나이 %d \n",ei.empNum,ei.age);
	return 0;
}


이는 테이블의 개념적 이해를 위한 예제이다.
단 해쉬의 개념이 빠져있기 때문에 효율적인 테이블이라 할수는 없다.

테이블에 의미를 부여하는 해쉬 함수와 충돌문제

int main(void){
	EmpInfo empInfoArr[100];

	EmpInfo emp1 = {20120003, 42};	
	EmpInfo emp2 = {20130012, 33};
	EmpInfo emp3 = {20170049, 27};

	EmpInfo emp1 r1,r2,r3;

	empInfoArr[GetHashValue(emp1.empNum)]=emp1;
	empInfoArr[GetHashValue(emp2.empNum)]=emp2;
	empInfoArr[GetHashValue(emp3.empNum)]=emp3;

	r1 = empInfoArr[GetHashValue(20120003)];
	r1 = empInfoArr[GetHashValue({20130012)];
	r1 = empInfoArr[GetHashValue(20170049)];

	printf("%d %d" , r1.empNum, r1.age);
	printf("%d %d" , r2.empNum, r2.age);
	printf("%d %d" , r3.empNum, r3.age);

	return 0;
}

int GetHashValue(int empNum){
	return empNum % 100;
}

단번에 저장 단번에 탐색가능한 기초 데이터 타입 = 배열

윗 예제는 데이터는 다른데 해쉬 값은 같은 충돌 발생 가능.

%100 으로 리턴한다면 해쉬 충돌이 발생할 수 있다. (뒷 2자리가 같은경우 동일 해쉬 값이 출력)

어느정도 갖춰진 해쉬 테이블의 예: Person

typedef struct _person{
	int ssn;	// 주민등록번호
	char name[STR_LEN]; // 이름
	char addr[STR_LEN]; // 주소
} Person;

int GetSSN(Person * p);
void ShowPerInfo(Person * p);
Person * MakePersonData(int ssn, char * name , char * addr);

int GetSSN(Person * p){
	return p->ssn;
}

void ShowPerInfo(Person *p){
	printf("주민등록번호 : %d \n",p->ssn);
	printf("이름 : %s \n", p->name);
	printf("주소: %s \n\n",p->addr);
}

Person * MakePersonData(int ssn, char * name, char * addr){
	Person * newP = (Person*)malloc(sizeof(Personn));
	newP->ssn = ssn;
	strcpy(newP->name,name);
	strcpy(newP->addr,addr);
	return newP;
}

typedef int Key; // 주민등록번호
typedef Person * Value;

enum SlotStatus{EMPTY, DELETED,INUSE};

typedef struct _slot{
	Key key;
	Value val;
	enum SlotStatus status;
} Slot;

(
해당 예제의 Person * Value 의 Value 는 Person 포인터의 주소값을 저장.

즉 key Value 를 가진 slot 의 value 는 데이터가 저장된 주소값을 포함한다.
)

EMPTY : 이슬롯에는 데이터가 저장된바 없다.
DELETED : 이 슬롯에는 데이터가 저장된바 있으나 현재는 비워진 상태이다.
INUSE : 이 슬롯에는 현재 유효한 데이터가 저장되어 있다.

지금 당장은 EMPTY와 INUSE면 충분, 그러나 충돌 문제의 해결을 감안하여 DELETED 
를 슬롯의 상태에 포함시킨다.


해쉬 테이블의 헤더파일과 초기화 함수

typedef int HashFunc(Key k);
typedef struct _table{
	Slot tbl[MAX_TBL];
	HashFunc * hf;
} Table;
//테이블 초기화
void TBLInit(Table * pt,HashFunc * f);

//테이블에 키와 값 저장
void TBLInsert(Table * pt, Key k, Value v);

// 키를 근거로 테이블에서 데이터 삭제
Value TBLDelete(Table * pt, Key k);

// 키를 근거로 테이블에서 데이터 탐색
Value TBLSearch(Table * pt, Key k);

void TBLInit(Table * pt, HashFunc * f){
	int i;
	
	//슬롯 초기화
	for(i=0;i<MAX_TBL;i++)
		(pt->tbl[i]0.status = EMPTY;
	
	pt->hf = f; // 해쉬 함수 등록
}

해쉬 함수는 등록 또는 변경이 가능하도록 정의하는 것이 좋다.
그리고 일반적으로 삽입, 삭제 및 탐색의 과정에서 키를 별도로 전달하도록 함수가 정의된다.

void TBLInsert(Table * pt, Key k, Value v){
	int hv = pt->hf(k); // 해쉬 값을 얻는다.
	pt->tbl[hv].val = v;
	pt->tbl[hv].key = k;
	pt->tbl[hv].status = INUSE;
}

Value TBLDelete(Table * pt, Key k){
	int hv = pt->hf(k); // 해쉬 값을 얻는다.
	if((pt->tbl[hv]).status !=INUSE){
		return NULL;
	}
	else{
		(pt->tbl[hv]).status = DELETED;
		return (pt->tbl[hv]).val; // 삭제되는 데이터 반환
	}
}

Value TBLSearch(Table * pt, Key k){
	int hv = pt->hf(k); // 해쉬 값을 얻는다.
	if((pt->tbl[hv]).status != INUSE)
		return NULL;
	else
		return (pt->tbl[hv]).val; // 탐색 대상 반환
}

좋은 해쉬 함수의 조건
데이터의 저장위치가 적당히 분산되어있는 경우 
데이터가 특정위치에 몰려 있는 경우는 좋지 않은 해쉬 함수..

좋은 해쉬 함수는 키의 일부분을 참조하여 해쉬 값을 만들지 않고, 키 전체를 참조하여 해쉬 값을 만들어 낸다.

-> 이는 많은 수의 데이터를 조합하여(키 전부를 조합) 해쉬 값 생성시 다양한 값의 생성을 기대할 수 있을것이라는 단순한 생각을 근거로 한다.


자릿수 선택 방법과 자릿수 폴딩 방법
- 자릿수 선택 방법
"여덟 자리의 수로 이뤄진 키에서 다양한 해쉬 값 생성에 도움을 주는 네 자리의 수를 뽑아서 해쉬 값을 생성한다"
키의 특정 위치에서 중복의 비율이 높거나 아예 공통으로 들어가는 값이 있다면 이들을 제외 시키는 방법

- 자릿수 폴딩 방법
ex) 27|34|19         ->   27+34+19
폴딩의 방법에 있어서 꼭 지켜야 하는 정해진 규칙이 있는 것은 아니다.
여러가지 사고를 근거로 다양한 적용이 가능하다


13-2 
충돌 문제의 해결책
선형 조사법(Linear Probing)
f(k)+1 -> f(k)+2 -> f(k)+3 -> f(k)+4 ...
선형 조사법에서 빈 자리 찾는 과정 (겹치는 주소값 + 1)

선형 조사법은 단순하지만, 충돌의 횟수가 증가함에 따라서
클러스터 현상(특정 영역 데이터가 몰리는 현상:군집화)이 발생한다는 단점 존재.

이차 조사법과 슬롯의 상태 DELETED
f(k)+1^2 -> f(k)+2^2 -> f(k)+3^2 -> f(k)+4^2
이차 조사법의 빈자리 찾는 과정, 선형 조사법보다 멀리서 빈자리를 찾음.

이렇듯 DELETED 상태로 별도 표시 해 두어야 동일한 해쉬 값의 데이터 저장을 의심 할 수 있다.

이중 해쉬 : 이해
해쉬 값이 같으면, 충돌 발생시 빈 슬롯을 찾기 위한 접근 위치가 늘 동일하다는 문제점을 해결한 방법으로 
총 두개의 해쉬 함수를 활용하는 방법이다.

1차 해쉬 함수 h1(k) = k%15 // 배열 길이가 15인 경우의 예
2차 해쉬 함수 h2(k) = 1+(k%c) // 15보다 작은 소수로 c를 결정

ex) 
 1차 해쉬 함수 : h1(k) = k%15
 2차 해쉬 함수 : h2(k) = 1+(k%7)

1을 더하는 이유 : 2차 해쉬 값이 0이 되는 것을 막기 위해서
c를 15보다 작은 값으로 하는 이유 : 배열의 길이가 15이므로
c를 소수로 결정하는 이유 : 클러스터 현상을 낮춘다는 통계를 근거로

이중 해쉬 : 적용
 1차 해쉬 함수 : h1(k) = k%15
 2차 해쉬 함수 : h2(k) = 1+(k%7)

h1(3) = 3%15 = 3 // 1 차 저장
h1(18) = 18%15 = 3 // 2차 충돌
h1(33) = 33%15 = 3 // 3차 충돌

h2(18) = 1+18 % 7 = 5 // 18에 대한 2차 해쉬 값
h3(33) = 1+33 % 7 = 6 // 33에 대한 2차 해쉬 값
 
체이닝(닫힌 어드레싱 모델)

한 해쉬 값에 다수의 데이터를 저장할 수 있도록 배열을 2차원의 형태로 선언하는 모델

한 해쉬 값에 다수의 데이터를 저장할 수 있도록 각 해쉬 값 별로 연결 리스트를 구성하는 모델

