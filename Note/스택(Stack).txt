스택은 쉽게 이해 할 수 있다.
배열이나 연결리스트의 지식 기반이 있다면,

하지만 계산기 프로그램이 더 어려움!
(스택의활용)

스택의 정의와 ADT

스택은 먼저 들어간 것이 나중에 나오는 자료구조이다.
LIFO(Last-in,First-out)구조의 자료구조

스택의 기본 연산
push : 데이터를 삽입
pop : 데이터의추출+삭제
peek : 데이터 추출(현재위치)

스택의 ADT
void StackInit(Stack * pstack);
 - 스택의 초기화를 진행한다.
 - 스택 생성 후 제일 먼저 호출되는 함수

int SIsEmpty(Stack * pstack);
 - 스택이 빈 경우 TRUE(1)을, 그렇지 않은 경우 FALSE(0)을 반환한다.

void Spush(Stack *pstack,Data data);
 - 마지막에 저장된 요소를 삭제한다.
 - 삭제된 데이터는 반환이 된다.
 - 본 함수의 호출을 위해서는 데이터가 하나 이상 존재함이 보장되어야 한다.

Data SPeek(Stack * pstack);
 - 마지막에 저장된 요소를 반환하되 삭제하지 않는다.
 - 본 함수의 호출을 위해서는 데이터가 하나 이상 존재함이 보장되어야 한다.

ADT를 대상으로 배열 기반의 스택, 연결 리스트 기반의 스택을 구현할 수 있으면 좋다.

ADT를 토대로 헤더파일을 정의할수 있으면 좋다.

1.배열 기반 구현

구현의 논리
인덱스가 0인 위치를 스택의 바닥으로 정의해야 배열 길이에 상관 없이
바닥의 인덱스 값이 동일해진다.(구현의 용이성)

topIndex = 0 일때, 바닥으로 정의된다.

push : Top을 위로 한 칸 올리고, Top이 가리키는 위치에 데이터 저장.
pop : Top이 가리키는 데이터를 반환하고, Top를 아래로 한칸 내림.

배열 스택 구조체 정의
typedef struct _arrayStack{
	Data stackArr[STACK_LEN];
	int topIndex;
}ArrayStack;






