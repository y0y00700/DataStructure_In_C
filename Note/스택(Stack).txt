스택은 쉽게 이해 할 수 있다.
배열이나 연결리스트의 지식 기반이 있다면,

하지만 계산기 프로그램이 더 어려움!
(스택의활용)

스택의 정의와 ADT

스택은 먼저 들어간 것이 나중에 나오는 자료구조이다.
LIFO(Last-in,First-out)구조의 자료구조

스택의 기본 연산
push : 데이터를 삽입
pop : 데이터의추출+삭제
peek : 데이터 추출(현재위치)

스택의 ADT
void StackInit(Stack * pstack);
 - 스택의 초기화를 진행한다.
 - 스택 생성 후 제일 먼저 호출되는 함수

int SIsEmpty(Stack * pstack);
 - 스택이 빈 경우 TRUE(1)을, 그렇지 않은 경우 FALSE(0)을 반환한다.

void Spush(Stack *pstack,Data data);
 - 마지막에 저장된 요소를 삭제한다.
 - 삭제된 데이터는 반환이 된다.
 - 본 함수의 호출을 위해서는 데이터가 하나 이상 존재함이 보장되어야 한다.

Data SPeek(Stack * pstack);
 - 마지막에 저장된 요소를 반환하되 삭제하지 않는다.
 - 본 함수의 호출을 위해서는 데이터가 하나 이상 존재함이 보장되어야 한다.

ADT를 대상으로 배열 기반의 스택, 연결 리스트 기반의 스택을 구현할 수 있으면 좋다.

ADT를 토대로 헤더파일을 정의할수 있으면 좋다.

1.배열 기반 구현

구현의 논리
인덱스가 0인 위치를 스택의 바닥으로 정의해야 배열 길이에 상관 없이
바닥의 인덱스 값이 동일해진다.(구현의 용이성)

topIndex = 0 일때, 바닥으로 정의된다.

push : Top을 위로 한 칸 올리고, Top이 가리키는 위치에 데이터 저장.
pop : Top이 가리키는 데이터를 반환하고, Top를 아래로 한칸 내림.

배열 스택 구조체 정의
typedef struct _arrayStack{
Data stackArr[STACK_LEN];
int topIndex;
}ArrayStack;


헤더 구현(ADT 기반) 

#ifndef __STACK_H__
#define __STACK_H__

#define TRUE 1
#define FALSE 0
#define STACK_LEN 100;

typedef int Data;


typedef struct _stack
{
Stack stackArr[STACK_LEN];
int topIndex;
} ArrayStack;

typedef ArrayStack Stack;

//스택의 기본 연산
//push : 데이터를 삽입
//pop : 데이터의추출+삭제
//peek : 데이터 추출(현재위치)
//
//스택의 ADT
//void StackInit(Stack * pstack);
// - 스택의 초기화를 진행한다.
// - 스택 생성 후 제일 먼저 호출되는 함수
//
//int SIsEmpty(Stack * pstack);
// - 스택이 빈 경우 TRUE(1)을, 그렇지 않은 경우 FALSE(0)을 반환한다.
//
//Data Spop(Stack *pstack,Data data);
// - 마지막에 저장된 요소를 삭제한다.
// - 삭제된 데이터는 반환이 된다.
// - 본 함수의 호출을 위해서는 데이터가 하나 이상 존재함이 보장되어야 한다.
//

//Data SPeek(Stack * pstack);
// - 마지막에 저장된 요소를 반환하되 삭제하지 않는다.
// - 본 함수의 호출을 위해서는 데이터가 하나 이상 존재함이 보장되어야 한다.

void SPush(Stack * pstack,Data data);

void StackInit(Stack * pstack);

int SIsEmpty(Stack * pstack);

Data Spop(Stack *pstack);

Data SPeek(Stack * pstack);



#endif

스택 구현 (소스) 

# include <stdio.h>
# include "Stack.h"
void StackInit(Stack * pstack){
pstack->topIndex = NULL; // 틀림 -> -1 로 변경 필요 
};

int SIsEmpty(Stack * pstack){
if(pstack->topIndex == -1){
return TRUE;
}
return FALSE;
};

void SPush(Stack * pstack,Data data){
(pstack->topIndex)++;
pstack->stackArr[topIndex] = data;
return;
}

Data Spop(Stack *pstack){
if(SIsEmpty(pstack)){
return NULL; // 틀림 -> exit(-1); 
}
int tmpIdx = pstack->topIndex;
(pstack->topIndex)--;
return pstack->stackArr[tmpIdx];
};

Data SPeek(Stack * pstack){
if(SIsEmpty(pstack)){
return NULL; // 틀림 -> exit(-1); 
}
return pstack->stackArr[pstack->topIndex];
};



2. 연결 리스트 기반 구현

리스트의 구성 -> head 만 필요하다. 신규 노드가 추가되면 해당 노드를 head에 위치를 잡아준다.
newNode->next 를  head->next 로 연결해주면 끝난다.

헤더파일 정의
typedef int Data;
typedef struct _node{
Data data; 
struct _node * next;
} Node;

typedef struct _listStack{
Node * head;
}

typedef ListStack Stack;


구현 연습

헤더 


#ifndef __STACK_H__
#define __STACK_H__

#include <stdio.h>
#include <stdlib.h>

#define TRUE 1
#define FALSE 0
typedef int Data;

typedef struct _node{
Data data;
struct _node * next;
}Node;

typedef struct _listStrack{
Node *head;
};

void SPush(Stack * pstack,Data data);

void StackInit(Stack * pstack);

int SIsEmpty(Stack * pstack);

Data Spop(Stack *pstack);

Data SPeek(Stack * pstack);

#endif

소스

#include <stdio.h>
#include "LinkedListStack.h"

void SPush(Stack * pstack,Data data){
Node * newNode =(*Node)malloc(sizeof(Node));

newNode->data = data;
newNode->next = pstack->head;
pstack->head = newNode;
}

void StackInit(Stack * pstack){
pstack->head = null;
}

int SIsEmpty(Stack * pstack){
if(pstack->head = NULL){
return TRUE;
}
return FALSE;
}

Data Spop(Stack * pstack){
if(SIsEmpty){
exit(-1);
}
Data sData = pstack->head->data;
Node * sNode = pstack->head;
pstack->head = pstack->head->next;
free(sNode);
return sData;

}

Data SPeek(Stack * pstack){
if(SIsEmpty){
exit(-1);
}
return pstack->head;
}