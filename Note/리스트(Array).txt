연결리스트(Linked List)

1.리스트의 구분
순차 리스트 : 배열을 기반으로 구현된 리스트
연결 리스트 : 메모리의 동적 할당을 기반으로 구현된 리스트

구현 방법을 기준으로 한 구분임. 따라서 이 두 리스트의
ADT는 동일해도 문제가 되지 않는다.

2.리스트의 특징 (ADT를 정의할때 고려해야 할 내용)
저장 형태 : 데이터를 나란히(하나의 열로) 저장한다.
저장 특성 : 중복이 되는 데이터의 저장을 허용한다.

3.리스트의 ADT(C기반)
void ListInit(List *plist);
 - 초기화할 리스트의 주소 값을 인자로 전달한다.
 - 리스트 생성 후 제일 먼저 호출되어야 하는 함수이다.

void LInsert(List *plist, LData data);
 - 리스트에 데이터를 저장한다. 매개변수 data에 전달된 값을 저장한다.

int LFirst(List *plist, LData *pdata);
 - 첫 번째 데이터가 pdata가 가리키는 메모리에 저장된다.
 - 데이터의 참조를 위한 초기화가 진행된다.
 - 참조 성공시 TRUE(1), 실패 시 FALSE(0)를 반환
 * LData는 저장 대상의 자료형을 결정 할 수 있도록 typedef로 선언된 자료형의 이름이다.

int LNext(List *plist,LData *pdata);
 - 참조된 데이터의 다음 데이터가 pdata가 가리키는 메모리에 저장된다.
 - 순차적인 참조를 위해서 반복 호출이 가능하다.
 - 참조를 새로 시작하려면 먼저 LFirst 함수를 호출해야 한다.
 - 참조 성공 시 TRUE(1), 실패 시 FALSE(0)를 반환

LData LRemove(List *plist);
 - LFirst 또는 LNext 함수의 마지막 반환 데이터를 삭제한다.
 - 삭제된 데이터는 반환된다.
 - 마지막 반환 데이터를 삭제하므로 연이은 반복 호출을 허용하지 않는다.

int LCount(List *plist);
 - 리스트에 저장되어 있는 데이터의 수를 반환한다.


4.배열을 이용한 리스트 구현
실행을 위해 필요한 파일들
ArrayList.h 리스트 자료구조의 헤더파일
ArrayList.c 리스트 자료구조의 소스파일
ListMain.c 리스트 관련 main 함수가 담긴 소스파일

4-06부터