정렬(sort) => 탐색을 설명하기 위한 것?
= 어떠한 기준을 가지고 정렬된 대상을 효율적으로 탐색할 것인가

단순한 정렬 알고리즘 : 구현이 용이한 반면 성능이 만족스럽지 않을 수 있다.
복잡한 정렬 알고리즘  : 구현이 복잡하지만 성능이 만족스럽다.

버블 정렬 : 이해
구현 용이(간단)
루틴이 두개 반복됨 ( 2중 for문)


버블 정렬: 성능평가
n^2 - n / 2
O(n^2)

선택 정렬
별도의 메모리 공간을 갖는다.(정렬대상 배열과 같은 크기)
우선순위가 높은 것을 별도 메모리공간에 저장.

개선 -> (별도의 메모리 공간 쓰지 않고...)
0번 인덱스의 위치에 들어있는 값과 우선순위가 높은 녀석의 자리를 swap
1번 인덱스부터 다시 우선순위 높은 녀석위치의 swap을 반복

void SelSort(int arr[],int n){
int i,j;
int maxIdx;
int temp;

for(i=0;i<n-1;i++){
maxIdx = i;
for(j = i+1;j<n;j++){
if(arr[j]<arr[maxIdx])
maxIdx = j;
}
}
// swap
temp = arr[i];
arr[i] = arr[maxIdx];
arr[maxIdx] = temp;
}

선택정렬 : 성능평가 
n^2 - n / 2
O(n^2)


삽입 정렬: 이해
1. 정렬이 완료된 영역과 정렬이 안된 영역을 구분해둔다.
2. 정렬이 되지 않은 영역에서 데이터를 정렬된 영역으로 넣어 정렬 및 영역을 확장하는 방식이다.

구현 관점
뒤로 한칸씩 밀어내면서(이동) 자리를 찾는 경우 그 위치 인덱스로 집어 넣는다.

void InsertSort(int arr[],int n){
	int i,j;
	int insData;
	
	for(i=1; i<n;i++){
		insData = arr[i]; // 미리 데이터를 저장해둠
		for(j=i-1;j>=0;j--){
			if(arr[j] > insData)
				// 뒤로 미는 과정
				arr[j+1]=arr[j];
			else	break;
		}
		arr[j+1] = insData;
	}
}
성능 평가
O(n^2)


