수식트리의 구현(Expression Tree)
이진트리의 일종

이해는 가지만 납득이 안간다?

수식의 표현법 Pre In Post 로 나뉘어짐 (전중후)

이진트리를 활용하여 피연산자(2개) , 연산자(1개)를...?

수식트리 -> 수식을 표현하는 하나의 표현 방법

중위 표기법의 수식을 수식 트리로 변환하는 프로그램의 작성이 목적이다.

중위 표기법의 수식은 사람이 인식하기 좋은 수식.

컴파일러는 중위 표기법의 수식을 수식트리로 재구성한다.

수식 트리는 해석이 쉽다. 연산의 과정에서 우선순위를 고려하지 않아도 된다.

수식 트리를 만드는 절차!
중위 표기법의 수식을 바로 수식 트리로 표현하기 쉽지 않으므로,
이전 계산기 프로그램을 위해 만들어둔 함수
ConvToRPNExp 함수 (Infix -> PostFix Exp) 를 통해 PostFix로 변환해준다.

그리고 이전 시간에 구현한 이진트리를 활용하여, 수식트리로 변환할것.

수식트리의 구현과 관련된 헤더파일
#include "BinaryTree2.h"

BTreeNode * MakeExpTree(char exp[]); // 수식 트리 구성
: 후위 표기법 수식을 인자로 받아서 수식트리를 구성하고 루트 노드의 주소 값을 반환
int EvaluateExpTree(BTreeNode *bt); // 수식트리 계산
: MakeExpTree가 구성한 수식 트리의 수식을 계산하여 그 결과를 반환한다.

void ShowPrefixTypeExp(BTreeNode *bt); // 전위 표기법 기반 출력
void ShowInfixTypeExp(BTreeNode *bt); // 중위 표기법 기반 출력
void ShowPostfixTypeExp(BTreeNode *bt); // 후위 표기법 기반 출력

수식 트리의 구성 방법 

후위 표기법의 수식에서 먼저 등장하는 피연산자와 연산자를 이용해서 트리의 하단부터 
구성해 나가고 이어서 점진적으로 윗부분을 구성해 나간다.

1. 피연산자는 저장한다.
2. 연산자는 노드로 구성한다.
3. 연산자의 left ,right 노드를 연결

4. 서브트리를 피연산자로 인식 시켜서 서브트리로 구성


** 구현 레벨 
1. 피연산자는 무조건 스택에 쌓는다.
2. 연산자를 만나면 스택에서 피연산자 두개를 꺼내 트리 구성
3. 형성된 트리는 다시 스택에 쌓는다.

이를 반복한다.

맨마지막에 스택에 쌓여있다.
<구현코드 확인>

수식트리의 순회 : 그 결과 출력

//function Pointer 형 함수 
void ShowNodeData(int data){
	if(0<=data && data <=9)
		printf("%d",data); // 피연산자 출력
	else printf("%c",data); // 연산자 출력
}

수식 트리의 계산
1.재귀적으로 구성한다.(function의 재귀호출->탈출조건 필수) // 단말노드 식별
